{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nexport const useLogin = () => {\n  _s();\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const navigate = useNavigate();\n  const login = async (email, password) => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(\"/API/login\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n\n      // Log the response for debugging\n      const responseText = await response.text();\n      console.log(\"Response Text:\", responseText);\n      if (!response.ok) {\n        // Handle non-OK responses (404, 500, etc.)\n        setIsLoading(false);\n        setError(`Error: ${response.status} - ${response.statusText}`);\n        return;\n      }\n\n      // If the response is OK, try parsing it as JSON\n      const json = JSON.parse(responseText);\n\n      // Save token and role from the response\n      localStorage.setItem(\"user\", JSON.stringify(json)); // Save entire user object\n      setIsLoading(false);\n\n      // Redirect based on role\n      navigate(json.role === \"employer\" ? \"/employer-home\" : \"/JobSeeker-home\");\n    } catch (err) {\n      // Catch JSON parsing errors or network errors\n      setIsLoading(false);\n      setError(\"Something went wrong. Please try again.\");\n      console.error(\"Login Error:\", err);\n    }\n  };\n  return {\n    login,\n    error,\n    isLoading\n  };\n};\n_s(useLogin, \"FYVGIxDyuuBPm1d9RwAQrqRCE1U=\", false, function () {\n  return [useNavigate];\n});","map":{"version":3,"names":["useState","useNavigate","useLogin","_s","error","setError","isLoading","setIsLoading","navigate","login","email","password","response","fetch","method","headers","body","JSON","stringify","responseText","text","console","log","ok","status","statusText","json","parse","localStorage","setItem","role","err"],"sources":["C:/Users/DELL/OneDrive/Desktop/MERN STACK/frontend/src/hooks/UseLogin.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nexport const useLogin = () => {\r\n  const [error, setError] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const navigate = useNavigate();\r\n\r\n  const login = async (email, password) => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const response = await fetch(\"/API/login\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ email, password }),\r\n      });\r\n\r\n      // Log the response for debugging\r\n      const responseText = await response.text();\r\n      console.log(\"Response Text:\", responseText);\r\n\r\n      if (!response.ok) {\r\n        // Handle non-OK responses (404, 500, etc.)\r\n        setIsLoading(false);\r\n        setError(`Error: ${response.status} - ${response.statusText}`);\r\n        return;\r\n      }\r\n\r\n      // If the response is OK, try parsing it as JSON\r\n      const json = JSON.parse(responseText);\r\n\r\n      // Save token and role from the response\r\n      localStorage.setItem(\"user\", JSON.stringify(json)); // Save entire user object\r\n      setIsLoading(false);\r\n\r\n      // Redirect based on role\r\n      navigate(json.role === \"employer\" ? \"/employer-home\" : \"/JobSeeker-home\");\r\n    } catch (err) {\r\n      // Catch JSON parsing errors or network errors\r\n      setIsLoading(false);\r\n      setError(\"Something went wrong. Please try again.\");\r\n      console.error(\"Login Error:\", err);\r\n    }\r\n  };\r\n\r\n  return { login, error, isLoading };\r\n};\r\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,WAAW,QAAQ,kBAAkB;AAE9C,OAAO,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGL,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACM,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAMQ,QAAQ,GAAGP,WAAW,CAAC,CAAC;EAE9B,MAAMQ,KAAK,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;IACvCJ,YAAY,CAAC,IAAI,CAAC;IAClBF,QAAQ,CAAC,IAAI,CAAC;IAEd,IAAI;MACF,MAAMO,QAAQ,GAAG,MAAMC,KAAK,CAAC,YAAY,EAAE;QACzCC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAER,KAAK;UAAEC;QAAS,CAAC;MAC1C,CAAC,CAAC;;MAEF;MACA,MAAMQ,YAAY,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MAC1CC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEH,YAAY,CAAC;MAE3C,IAAI,CAACP,QAAQ,CAACW,EAAE,EAAE;QAChB;QACAhB,YAAY,CAAC,KAAK,CAAC;QACnBF,QAAQ,CAAC,UAAUO,QAAQ,CAACY,MAAM,MAAMZ,QAAQ,CAACa,UAAU,EAAE,CAAC;QAC9D;MACF;;MAEA;MACA,MAAMC,IAAI,GAAGT,IAAI,CAACU,KAAK,CAACR,YAAY,CAAC;;MAErC;MACAS,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEZ,IAAI,CAACC,SAAS,CAACQ,IAAI,CAAC,CAAC,CAAC,CAAC;MACpDnB,YAAY,CAAC,KAAK,CAAC;;MAEnB;MACAC,QAAQ,CAACkB,IAAI,CAACI,IAAI,KAAK,UAAU,GAAG,gBAAgB,GAAG,iBAAiB,CAAC;IAC3E,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZ;MACAxB,YAAY,CAAC,KAAK,CAAC;MACnBF,QAAQ,CAAC,yCAAyC,CAAC;MACnDgB,OAAO,CAACjB,KAAK,CAAC,cAAc,EAAE2B,GAAG,CAAC;IACpC;EACF,CAAC;EAED,OAAO;IAAEtB,KAAK;IAAEL,KAAK;IAAEE;EAAU,CAAC;AACpC,CAAC;AAACH,EAAA,CA7CWD,QAAQ;EAAA,QAGFD,WAAW;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}