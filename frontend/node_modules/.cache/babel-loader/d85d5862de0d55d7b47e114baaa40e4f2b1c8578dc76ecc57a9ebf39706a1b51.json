{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport UseAuthContext from \"./UseAuthContext\";\nexport const useSignup = () => {\n  _s();\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const {\n    dispatch\n  } = UseAuthContext();\n  const navigate = useNavigate();\n  const signup = async (email, password) => {\n    setIsLoading(true);\n    setError(null);\n    const response = await fetch(\"/api/user/signup\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        email,\n        password\n      })\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      setIsLoading(false);\n      setError(data.error);\n    }\n    if (response.ok) {\n      // save the user to localStorage\n      localStorage.setItem(\"user\", JSON.stringify(data));\n\n      // update the context\n      dispatch({\n        type: \"LOGIN\",\n        payload: data\n      });\n      setIsLoading(false);\n      navigate(role === \"employer\" ? \"/employer-dashboard\" : \"/jobseeker-dashboard\");\n    }\n  };\n  return {\n    signup,\n    isLoading,\n    error\n  };\n};\n_s(useSignup, \"FYVGIxDyuuBPm1d9RwAQrqRCE1U=\", true);","map":{"version":3,"names":["useState","UseAuthContext","useSignup","_s","error","setError","isLoading","setIsLoading","dispatch","navigate","useNavigate","signup","email","password","response","fetch","method","headers","body","JSON","stringify","data","json","ok","localStorage","setItem","type","payload","role"],"sources":["C:/Users/DELL/OneDrive/Desktop/MERN STACK/frontend/src/hooks/UseSignup.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport UseAuthContext from \"./UseAuthContext\";\r\n\r\nexport const useSignup = () => {\r\n  const [error, setError] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const { dispatch } = UseAuthContext();\r\n  const navigate = useNavigate();\r\n\r\n  const signup = async (email, password) => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n\r\n    const response = await fetch(\"/api/user/signup\", {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ email, password }),\r\n    });\r\n\r\n    const data = await response.json();\r\n\r\n    if (!response.ok) {\r\n      setIsLoading(false);\r\n      setError(data.error);\r\n    }\r\n\r\n    if (response.ok) {\r\n      // save the user to localStorage\r\n      localStorage.setItem(\"user\", JSON.stringify(data));\r\n\r\n      // update the context\r\n      dispatch({ type: \"LOGIN\", payload: data });\r\n      setIsLoading(false);\r\n      navigate(\r\n        role === \"employer\" ? \"/employer-dashboard\" : \"/jobseeker-dashboard\"\r\n      );\r\n    }\r\n  };\r\n\r\n  return { signup, isLoading, error };\r\n};\r\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,cAAc,MAAM,kBAAkB;AAE7C,OAAO,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGL,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACM,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM;IAAEQ;EAAS,CAAC,GAAGP,cAAc,CAAC,CAAC;EACrC,MAAMQ,QAAQ,GAAGC,WAAW,CAAC,CAAC;EAE9B,MAAMC,MAAM,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;IACxCN,YAAY,CAAC,IAAI,CAAC;IAClBF,QAAQ,CAAC,IAAI,CAAC;IAEd,MAAMS,QAAQ,GAAG,MAAMC,KAAK,CAAC,kBAAkB,EAAE;MAC/CC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAER,KAAK;QAAEC;MAAS,CAAC;IAC1C,CAAC,CAAC;IAEF,MAAMQ,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;IAElC,IAAI,CAACR,QAAQ,CAACS,EAAE,EAAE;MAChBhB,YAAY,CAAC,KAAK,CAAC;MACnBF,QAAQ,CAACgB,IAAI,CAACjB,KAAK,CAAC;IACtB;IAEA,IAAIU,QAAQ,CAACS,EAAE,EAAE;MACf;MACAC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEN,IAAI,CAACC,SAAS,CAACC,IAAI,CAAC,CAAC;;MAElD;MACAb,QAAQ,CAAC;QAAEkB,IAAI,EAAE,OAAO;QAAEC,OAAO,EAAEN;MAAK,CAAC,CAAC;MAC1Cd,YAAY,CAAC,KAAK,CAAC;MACnBE,QAAQ,CACNmB,IAAI,KAAK,UAAU,GAAG,qBAAqB,GAAG,sBAChD,CAAC;IACH;EACF,CAAC;EAED,OAAO;IAAEjB,MAAM;IAAEL,SAAS;IAAEF;EAAM,CAAC;AACrC,CAAC;AAACD,EAAA,CArCWD,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}